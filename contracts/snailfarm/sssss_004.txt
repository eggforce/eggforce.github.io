pragma solidity >=0.5.0 <0.6.0;

/* SUPER SLOTHLY SNAIL SURPRISE SLAUGHTER

A silly game about clicking buttons.

Hatch snails of different colors.
When snails reach 1MM, you ascend.
Ascension resets your snails (of that color) to 0.
It also gives them a multiplier on hatch.
Ascension also allows you to post a message, displayed on the website.
Sacrifice 10K snails to rename yourself.
Sacrifice 100k snails to rename another player.

*/

contract SuperSlothlySnailSurpriseSlaughter {
    using SafeMath for uint;
    
    /* Event */
    
    event JoinedGame (address indexed sender, string player);
    event Hatched(address indexed sender, string player, uint256 eggUsed, uint256 eggBonus, uint256 newSnail, uint256 nestCount, uint256 nest);
    event ChangedMessage(address indexed sender, string player, string message);
    event NamedPlayer(address indexed sender, string player, string name);
    event RenamedOther(address indexed sender, string player, string previousName, string name);
    event VenturedLair(address indexed sender, string player, uint256 nest, uint256 fighterCount, uint256 odd);
    event WonFight(address indexed sender, string player, uint256 nest, uint256 fighterCount, uint256 odd, uint256 result, uint256 reward);
    event LostFight(address indexed sender, string player, uint256 nest, uint256 fighterCount, uint256 odd, uint256 result);

    /* Constants */
    
    uint256 public constant TIME_TO_HATCH_1SNAIL = 86400; //seconds in a day
    uint256 public constant STARTING_SNAIL       = 1000;
    uint256 public constant FROGKING_REQ         = 1000000;
    uint256 public constant NAME_YOURSELF_REQ    = 0;
    uint256 public constant NAME_OTHER_REQ       = 100000;
    
    /* Structs */

    struct Snail {
        uint256 size;
        uint256 lastHatch;
        uint256 ascension;
    }
    
    /* Variables */

    string public message = "Welcome to SUPER SLOTHLY SNAIL CLICKER DELUXE IV";
    uint256 public lastGlobalHatch = now;
    
    
    /* Mappings */
    
	mapping (address => bool) public hasStartingSnail;
    mapping (address => string) public name;
    mapping (address => bool) public canChangeMessage;
    mapping (address => mapping(uint256 => Snail)) public nest;
    
    mapping (address => uint256) public resolveBlock;
    mapping (address => uint256) public resolveNest;
    mapping (address => uint256) public resolveCount;
    mapping (address => uint256) public resolveOdd;
    
    /* Functions */
    
    // Constructor
    // Assigns all hot potatoes to dev for a proper game start
    // (dev is banned from playing the game)
    
    constructor() public {
    }
    
    // JoinGame
    // Initializes nests for player
    // Lets player name himself
    // Sets hasStartingSnail to true
    
    function JoinGame(string memory _name) public {
		require(hasStartingSnail[msg.sender] != true, "you're already playing, dummy");

		for(uint256 i = 0; i < 8; i++){
            nest[msg.sender][i].size = STARTING_SNAIL;
            nest[msg.sender][i].lastHatch = now;
            nest[msg.sender][i].ascension = 1;
        }
		
        hasStartingSnail[msg.sender] = true;
        name[msg.sender] = _name;
        
        emit JoinedGame(msg.sender, name[msg.sender]);
    }

    // HatchEgg
    // Hatches eggs into snails
    // If the player ascends from this, adjust accordingly

    function HatchEgg(uint256 _nest) public {
	
	    //compute eggs + global bonus
        uint256 _eggUsed = ComputeEgg(_nest, msg.sender);
        uint256 _bonus = ComputeGlobalBonus();
        uint256 _newSnail = _eggUsed.add(_bonus);
        lastGlobalHatch = now;
        nest[msg.sender][_nest].lastHatch = now;
        nest[msg.sender][_nest].size = nest[msg.sender][_nest].size.add(_newSnail);
        
        //check if we ascend
        uint256 _req = FROGKING_REQ.mul(nest[msg.sender][_nest].ascension);
        if(nest[msg.sender][_nest].size >= _req) {
             nest[msg.sender][_nest].size = STARTING_SNAIL;
             nest[msg.sender][_nest].ascension = nest[msg.sender][_nest].ascension.add(1);
             canChangeMessage[msg.sender] = true;
        }
        
        emit Hatched(msg.sender, name[msg.sender], _eggUsed, _bonus, _newSnail, nest[msg.sender][_nest].size, _nest);
    }
    
    // ChangeMessage
    // Lets a player change the global message
    
    function ChangeMessage(string memory _message) public {
        require(canChangeMessage[msg.sender] == true, "ascend to change message");
        
        message = _message;
        canChangeMessage[msg.sender] = false;
        
        emit ChangedMessage(msg.sender, name[msg.sender], _message);
    }
    
    // NameMe
    // Lets a player change his name
    
    function NameMe(uint256 _nest, string memory _name) public {
        require(nest[msg.sender][_nest].size > NAME_YOURSELF_REQ, "sacrifice 10k snails to name yourself");
        require(bytes(_name).length < 16, "string too long");
        
        string memory _previousName = name[msg.sender];
        nest[msg.sender][_nest].size = nest[msg.sender][_nest].size.sub(NAME_YOURSELF_REQ);
        name[msg.sender] = _name;
        
        emit NamedPlayer(msg.sender, _previousName, _name);
    }
    
    // RenameOther
    // Lets a player change the name of someone else
    
    function RenameOther(uint256 _nest, string memory _name, address _adr) public {
        require(nest[msg.sender][_nest].size > NAME_OTHER_REQ, "sacrifice 100k snails to name yourself");
        
        nest[msg.sender][_nest].size = nest[msg.sender][_nest].size.sub(NAME_OTHER_REQ);
        string memory _previousName = name[_adr]; //memory or storage? memory! = temp, whereas storage = perm
        name[_adr] = _name;
        
        emit RenamedOther(msg.sender, name[msg.sender], _previousName, _name);
    }
    
    // VentureLair
    // Lets a player choose his snails and his odds
    // Blockhash from next block will be used for resolution
    
    function VentureLair(uint256 _nest, uint256 _fighterCount, uint256 _odd) public {
        require(nest[msg.sender][_nest].size > _fighterCount, "not enough snails");
        require(_odd >= 5 && _odd <= 95, "pick odds between 5 and 95%");
        require(resolveBlock[msg.sender] == 0, "your snails are fighting! solve the fight first");
        
        resolveBlock[msg.sender] = block.number.add(1);
        resolveNest[msg.sender] = _nest;
        resolveCount[msg.sender] = _fighterCount;
        resolveOdd[msg.sender] = _odd;
        
        emit VenturedLair(msg.sender, name[msg.sender], _nest, _fighterCount, _odd);
    }
    
    // ResolveFight
    // Uses previously used parameters + blockhash to give the result
    // Has to be at least one block after the previous transaction
    
    function ResolveFight() public {
        require(resolveBlock[msg.sender] != 0, "venture in the sloth lair first");
        require(block.number >= resolveBlock[msg.sender], "wait for 1 block to pass");
        
        uint _result = uint(keccak256(abi.encodePacked(blockhash(resolveBlock[msg.sender]), resolveBlock[msg.sender]))) % 100; // 0-99

        if(_result < resolveOdd[msg.sender]) {
            uint _reward = resolveCount[msg.sender].mul(100).div(resolveOdd[msg.sender]);
            _reward = _reward.sub(resolveCount[msg.sender]);
            nest[msg.sender][resolveNest[msg.sender]].size = nest[msg.sender][resolveNest[msg.sender]].size.add(_reward);
            
            emit WonFight(msg.sender, name[msg.sender], resolveNest[msg.sender], resolveCount[msg.sender], resolveOdd[msg.sender], _result, _reward);
        } else {
            nest[msg.sender][resolveNest[msg.sender]].size = nest[msg.sender][resolveNest[msg.sender]].size.sub(resolveCount[msg.sender]);
            
            emit LostFight(msg.sender, name[msg.sender], resolveNest[msg.sender], resolveCount[msg.sender], resolveOdd[msg.sender], _result);
        }
        resolveBlock[msg.sender] = 0;
    }
    
    /* Calculations */
    
    // ComputeEgg
    // Returns eggs produced since last hatch
    
    function ComputeEgg(uint256 _nest, address _adr) public view returns(uint256) {
        uint256 _egg = now.sub(nest[_adr][_nest].lastHatch);
        _egg = _egg.mul(nest[_adr][_nest].size).mul(nest[_adr][_nest].ascension).div(TIME_TO_HATCH_1SNAIL);
        return _egg;
    }

    // ComputeGlobalBonus
    // Returns bonus eggs since last global hatch (1 per second)
    
    function ComputeGlobalBonus() public view returns(uint256 _egg) {
        return now.sub(lastGlobalHatch);
    }

    // Gets
    
    // GetNest
    // Returns number of snails in a given nest
    
    function GetNest(uint256 _nest, address _adr) public view returns(uint256) {
        return nest[_adr][_nest].size;
    }
    
    // GetAscension
    // Returns ascension level for a given nest
    
    function GetAscension(uint256 _nest, address _adr) public view returns(uint256) {
        return nest[_adr][_nest].ascension;
    }
    
    // GetName
    // Returns name for an address
    
    function GetName(address _adr) public view returns(string memory) {
        return name[_adr];
    }

}

library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}