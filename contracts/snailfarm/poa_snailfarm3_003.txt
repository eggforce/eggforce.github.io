pragma solidity ^0.5.3;

/* POA SNAILFARM 3

SnailFarm 3 on the POA Network!
For a detailed look into the original SnailFarm 3, check out:
https://snailking.github.io/snailfarm3

POA SnailFarm has the following changes:

1) no snailthrone integration (more ETH to divs)

2) no more snailmaster

3) no more than 10% of the egg supply can be sold or bought at once.
On a sale, extra eggs are destroyed.

4) market eggs start at 10x starting snails (from 1x)

5) the red harvest is on a 1 hour timer (down from 4 hours)

6) the red harvest decreases from 300 to 100 reds

7) the red harvest starts at a fourth of the round pot (down from full)

8) players get the square root of their snails in Reds (rather than 1%)

9) costs are changed to a proportion of the snailpot 

10) there is now a slight cost to joining a round

11) rounds are on a 24h downtime (from 12)

POA of every POA SnailFarm transaction is split as such:
40% to the snailPot
40% to the eggPot
20% to the acorn holders

*/

contract SnailFarm3 {
    using SafeMath for uint;
    
    /* Event */
    
    event FundedTree (address indexed player, uint eth, uint acorns);
    event ClaimedShare (address indexed player, uint eth, uint acorns);
    event WithdrewBalance (address indexed player, uint eth);
    event Hatched (address indexed player, uint eggs, uint snails, uint hatchery);
    event SoldEgg (address indexed player, uint eggs, uint eth);
    event BoughtEgg (address indexed player, uint eggs, uint eth, uint playereggs);
    event StartedSnailing (address indexed player, uint indexed round);
    event BecameQueen (address indexed player, uint indexed round, uint spiderreq, uint hatchery);
    event BecameDuke (address indexed player, uint indexed round, uint squirrelreq, uint playerreds);
    event BecamePrince (address indexed player, uint indexed round, uint tadpolereq);
    event WonRound (address indexed roundwinner, uint indexed round, uint eth);
    event BeganRound (uint indexed round);
    event JoinedRound (address indexed player, uint indexed round, uint playerreds);
    event GrabbedHarvest (address indexed player, uint indexed round, uint eth, uint playerreds);
    event UsedRed (address indexed player, uint eggs, uint snails, uint hatchery);
    event FoundSlug (address indexed player, uint indexed round, uint snails);
    event FoundLettuce (address indexed player, uint indexed round, uint lettucereq, uint playerreds);
    event FoundCarrot (address indexed player, uint indexed round, uint eth);
    event BoostedPot (address indexed player, uint eth);

    /* Constants */
    
    uint256 public constant TIME_TO_HATCH_1SNAIL = 86400; //seconds in a day
    uint256 public constant STARTING_SNAIL       = 300;
    uint256 public constant FROGKING_REQ         = 1000000;
    uint256 public constant ACORN_PRICE          = 0.01 ether;
    uint256 public constant ACORN_MULT           = 10;
    uint256 public constant JOINING_ROUND_COST   = 1000; //as a divider of snailpot
    uint256 public constant HATCHING_COST        = 5000; //as a divider of snailpot
    uint256 public constant SPIDER_BASE_REQ      = 80;
    uint256 public constant SQUIRREL_BASE_REQ    = 2;
    uint256 public constant TADPOLE_BASE_REQ     = 200; //as a divider of snailpot
    uint256 public constant SLUG_MIN_REQ         = 100000;
    uint256 public constant LETTUCE_BASE_REQ     = 20;
    uint256 public constant CARROT_COST          = 200; //as a divider of snailpot
    uint256 public constant HARVEST_COUNT        = 100;
    uint256 public constant HARVEST_DURATION     = 3600; //1 hour in seconds
    uint256 public constant HARVEST_DUR_ROOT     = 60; //saves computation

    /* Variables */
    
	//False for downtime between rounds, true when round is ongoing
    bool public gameActive             = false;
	
	//Used to ensure a proper game start
    address public dev;
	
	//Current round
    uint256 public round                = 0;
	
	//Current top snail holder
	address public currentLeader;
	
	//Owners of hot potatoes
    address public currentSpiderOwner;
    address public currentTadpoleOwner;
	address public currentSquirrelOwner;
	address public currentSnailmaster;
	
	//Current requirement for hot potatoes
	uint256 public spiderReq;
    uint256 public tadpoleReq;
	uint256 public squirrelReq;
	
	//Current requirement for lettuce
	uint256 public lettuceReq;
	
	//Starting time for next round
	uint256 public nextRoundStart;
	
	//Starting and ending price for Red Harvest auction
	uint256 public harvestStartCost;
	uint256 public harvestEndCost;
	
	//Starting time for Red Harvest auction
	uint256 public harvestStartTime;
	
	//Current number of acorns over all holders
	uint256 public maxAcorn             = 0;
	
	//Current divs per acorn
	uint256 public divPerAcorn          = 0;
	
	//Current number of eggs for sale
    uint256 public marketEgg            = 0;
		
	//Reserve pot and round jackpot
    uint256 public snailPot             = 0;
    uint256 public roundPot             = 0;
    
	//Egg pot
    uint256 public eggPot               = 0;
    
    //SnailThrone div pot
    uint256 public thronePot            = 0;

    /* Mappings */
    
	mapping (address => bool) public hasStartingSnail;
	mapping (address => bool) public hasSlug;
	mapping (address => bool) public hasLettuce;
	mapping (address => uint256) public gotCarrot;
	mapping (address => uint256) public playerRound;
    mapping (address => uint256) public hatcherySnail;
    mapping (address => uint256) public claimedEgg;
    mapping (address => uint256) public lastHatch;
    mapping (address => uint256) public redEgg;
    mapping (address => uint256) public playerBalance;
    mapping (address => uint256) public prodBoost;
    mapping (address => uint256) public acorn;
    mapping (address => uint256) public claimedShare;
    
    /* Functions */
    
    // Constructor
    // Assigns all hot potatoes to dev for a proper game start
    // (dev is banned from playing the game)
    
    constructor() public {
        nextRoundStart = now.add(TIME_TO_HATCH_1SNAIL); //start game a day later
        
        //Assigns hot potatoes to dev originally
        dev = msg.sender;
        currentTadpoleOwner = msg.sender;
        currentSquirrelOwner = msg.sender;
        currentSpiderOwner = msg.sender;
        currentLeader = msg.sender;
        prodBoost[msg.sender] = 4; //base+tadpole+squirrel+spider
    }
    
    // BeginRound
    // Can be called by anyone to start a new round once downtime is over
    // Sets appropriate values, and starts new round
    
    function BeginRound() public {
        require(gameActive == false, "cannot start round while game is active");
        require(now > nextRoundStart, "round downtime isn't over");
        require(snailPot > 0, "cannot start round on empty pot");
        
        round = round.add(1);
		marketEgg = STARTING_SNAIL.mul(10);
        roundPot = snailPot.div(10);
        spiderReq = SPIDER_BASE_REQ;
        tadpoleReq = snailPot.div(TADPOLE_BASE_REQ);
        squirrelReq = SQUIRREL_BASE_REQ;
        lettuceReq = LETTUCE_BASE_REQ.mul(round);
        harvestStartTime = now;
        harvestStartCost = roundPot.div(4);
        harvestEndCost = harvestStartCost.div(10);
        
        gameActive = true;
        
        emit BeganRound(round);
    }
    
    // FundTree
    // Buy a share of the bankroll
    // Acorn price lowers from round to round
    
    function FundTree() public payable {
        require(tx.origin == msg.sender, "no contracts allowed");
        
        uint256 _acornsBought = ComputeAcornBuy(msg.value);
        
        //Previous divs are considered claimed
        claimedShare[msg.sender] = claimedShare[msg.sender].add(_acornsBought.mul(divPerAcorn));
        
        //Add to maxAcorn
        maxAcorn = maxAcorn.add(_acornsBought);
        
        //Split ETH to pot
        PotSplit(msg.value);
        
        //Add player acorns
        acorn[msg.sender] = acorn[msg.sender].add(_acornsBought);
        
        emit FundedTree(msg.sender, msg.value, _acornsBought);
    }
    
    // ClaimAcornShare
    // Sends unclaimed dividends to playerBalance
    // Adjusts claimable dividends
    
    function ClaimAcornShare() public {
        
        uint256 _playerShare = ComputeMyShare();
        
        if(_playerShare > 0) {
            
            //Add new divs to claimed divs
            claimedShare[msg.sender] = claimedShare[msg.sender].add(_playerShare);
            
            //Send divs to playerEarnings
            playerBalance[msg.sender] = playerBalance[msg.sender].add(_playerShare);
            
            emit ClaimedShare(msg.sender, _playerShare, acorn[msg.sender]);
        }
    }
    
    // WithdrawBalance
    // Withdraws the ETH balance of a player to his wallet
    
    function WithdrawBalance() public {
        require(playerBalance[msg.sender] > 0, "no ETH in player balance");
        
        uint _amount = playerBalance[msg.sender];
        playerBalance[msg.sender] = 0;
        msg.sender.transfer(_amount);
        
        emit WithdrewBalance(msg.sender, _amount);
    }
    
    // PotSplit
	// Allocates the ETH of every transaction
	// 40% snailpot, 40% eggpot, 20% to acorn holders
    
    function PotSplit(uint256 _msgValue) private {
        
        snailPot = snailPot.add(_msgValue.mul(4).div(10));
        eggPot = eggPot.add(_msgValue.mul(4).div(10));
        
        //Increase div per acorn proportionally
        divPerAcorn = divPerAcorn.add(_msgValue.div(5).div(maxAcorn));
    }
    
    // JoinRound
    // Gives red egg reward to player and lets them join the new round
    
    function JoinRound() payable public {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] != round, "player already in current round");
        require(hasStartingSnail[msg.sender] == true, "buy starting snails first");
		uint256 _cost = snailPot.div(JOINING_ROUND_COST);
		require(msg.value >= _cost, "not enough ETH cost");
		
		// If player sent more ETH than needed, refund excess to playerBalance
        if (msg.value > _cost) {
            uint _excess = msg.value.sub(_cost);
            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);
        }  
        
        uint256 _bonusRed = ComputeSquare(hatcherySnail[msg.sender]);
        hatcherySnail[msg.sender] = STARTING_SNAIL;
        redEgg[msg.sender] = redEgg[msg.sender].add(_bonusRed);
        
        //Check if carrot is owned, remove 1 to count if so
        if(gotCarrot[msg.sender] > 0) {
            gotCarrot[msg.sender] = gotCarrot[msg.sender].sub(1);
            
            //Check if result puts us at 0, lower prodBoost if so
            if(gotCarrot[msg.sender] == 0) {
                prodBoost[msg.sender] = prodBoost[msg.sender].sub(1);
            }
        }
        
        //Check if lettuce is owned, lower prodBoost if so
        if(hasLettuce[msg.sender]) {
            prodBoost[msg.sender] = prodBoost[msg.sender].sub(1);
            hasLettuce[msg.sender] = false;
        }
        
		//Set lastHatch to now, remove bought eggs
		lastHatch[msg.sender] = now;
		claimedEgg[msg.sender] = 0;
        playerRound[msg.sender] = round;
        
        emit JoinedRound(msg.sender, round, redEgg[msg.sender]);
    }
    
    // WinRound
    // Called when a player meets the snail requirement
    // Gives his earnings to winner
    // Pauses the game for 24 hours
    
    function WinRound(address _msgSender) private {
        
        gameActive = false;
        nextRoundStart = now.add(TIME_TO_HATCH_1SNAIL);
        
        hatcherySnail[_msgSender] = 0;
        snailPot = snailPot.sub(roundPot);
        playerBalance[_msgSender] = playerBalance[_msgSender].add(roundPot);
        
        emit WonRound(_msgSender, round, roundPot);
    }
    
    // HatchEgg
    // Hatches eggs into snails for a slight fixed ETH cost
    // If the player owns boosts, adjust result accordingly
    
    function HatchEgg() public payable {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
		uint256 _cost = snailPot.div(HATCHING_COST);
		require(msg.value >= _cost, "not enough ETH cost");
		
		// If player sent more ETH than needed, refund excess to playerBalance
        if (msg.value > _cost) {
            uint _excess = msg.value.sub(_cost);
            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);
        }  
        
        PotSplit(_cost);
        uint256 eggUsed = ComputeMyEgg(msg.sender);
        uint256 newSnail = eggUsed.mul(prodBoost[msg.sender]);
        claimedEgg[msg.sender] = 0;
        lastHatch[msg.sender] = now;
        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(newSnail);
        
        if(hatcherySnail[msg.sender] > hatcherySnail[currentLeader]) {
            currentLeader = msg.sender;
        }
        
        if(hatcherySnail[msg.sender] >= FROGKING_REQ) {
            WinRound(msg.sender);
        }
        
        emit Hatched(msg.sender, eggUsed, newSnail, hatcherySnail[msg.sender]);
    }
    
    // SellEgg
    // Exchanges player eggs for ETH
	// Eggs sold are added to the market
    
    function SellEgg() public {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        
        uint256 _eggSold = ComputeMyEgg(msg.sender);
		uint256 _maxSell = marketEgg.div(10);
		if(_eggSold > _maxSell){
			_eggSold = _maxSell;
		}
        uint256 _eggValue = ComputeSell(_eggSold);
        claimedEgg[msg.sender] = 0;
        lastHatch[msg.sender] = now;
        marketEgg = marketEgg.add(_eggSold);
        eggPot = eggPot.sub(_eggValue);
        playerBalance[msg.sender] = playerBalance[msg.sender].add(_eggValue);
        
        emit SoldEgg(msg.sender, _eggSold, _eggValue);
    }
    
    // BuyEgg
    // Buy a calculated amount of eggs for a given amount of ETH
	
	// Eggs bought are removed from the market
    
    function BuyEgg() public payable {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        
        uint256 _eggBought = ComputeBuy(msg.value);
        
        //Define final buy price
        uint256 _ethSpent = msg.value;
        
        //Refund player if he overpays. maxBuy is 1/9 of eggPot
        //(a/a+b) implies 1/9 of b gets the maximum 10% supply
        uint256 _maxBuy = eggPot.div(9);
        if (msg.value > _maxBuy) {
            uint _excess = msg.value.sub(_maxBuy);
            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);
            _ethSpent = _maxBuy;
        }  
        
        PotSplit(_ethSpent);
        marketEgg = marketEgg.sub(_eggBought);
        claimedEgg[msg.sender] = claimedEgg[msg.sender].add(_eggBought);
        
        emit BoughtEgg(msg.sender, _eggBought, _ethSpent, hatcherySnail[msg.sender]);
    }
    
    // BuyStartingSnail
    // Gives starting snails and sets prodBoost to 1
    
    function BuyStartingSnail() payable public {
        require(gameActive, "game is paused");
        require(tx.origin == msg.sender, "no contracts allowed");
        require(hasStartingSnail[msg.sender] == false, "player already active");
        require(msg.sender != dev, "shoo shoo, developer");
        uint256 _cost = snailPot.div(JOINING_ROUND_COST);
		require(msg.value >= _cost, "not enough ETH cost");
		
		// If player sent more ETH than needed, refund excess to playerBalance
        if (msg.value > _cost) {
            uint _excess = msg.value.sub(_cost);
            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);
        }  

        PotSplit(_cost);
		hasStartingSnail[msg.sender] = true;
        lastHatch[msg.sender] = now;
		prodBoost[msg.sender] = 1;
		playerRound[msg.sender] = round;
        hatcherySnail[msg.sender] = STARTING_SNAIL;
        
        emit StartedSnailing(msg.sender, round);
    }
    
    // GrabRedHarvest
    // Gets red eggs for ETH
    // Works as a dutch auction
    
    function GrabRedHarvest() public payable {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        
        //Check current harvest cost
        uint256 _harvestCost = ComputeHarvest();
        require(msg.value >= _harvestCost);
        
        //If player sent more ETH than needed, refund excess to playerBalance
        if (msg.value > _harvestCost) {
            uint _excess = msg.value.sub(_harvestCost);
            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);
        }
        
        PotSplit(_harvestCost);
        
        //Reset the harvest
        harvestStartCost = roundPot.div(4);
        harvestStartTime = now;
        
        //Give red eggs to player
        redEgg[msg.sender] = redEgg[msg.sender].add(HARVEST_COUNT);
        
        emit GrabbedHarvest(msg.sender, round, msg.value, redEgg[msg.sender]);
    }
    
    // UseRedEgg
    // Hatches a defined number of red eggs into snails
    // No ETH cost
    
    function UseRedEgg(uint256 _redAmount) public {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        
        if(_redAmount > redEgg[msg.sender]){
            _redAmount = redEgg[msg.sender];
        }
        redEgg[msg.sender] = redEgg[msg.sender].sub(_redAmount);
        uint256 _newSnail = _redAmount.mul(prodBoost[msg.sender]);
        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].add(_newSnail);
        
        if(hatcherySnail[msg.sender] > hatcherySnail[currentLeader]) {
            currentLeader = msg.sender;
        }
        
        if(hatcherySnail[msg.sender] >= FROGKING_REQ) {
            WinRound(msg.sender);
        }
        
        emit UsedRed(msg.sender, _redAmount, _newSnail, hatcherySnail[msg.sender]);
    }
    
    // FindSlug
    // Sacrifices all the snails the player owns (minimum 100k)
    // Raises his prodBoost by 1 permanently
    
    function FindSlug() public {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        require(hasSlug[msg.sender] == false, "already owns slug");
        require(hatcherySnail[msg.sender] >= SLUG_MIN_REQ, "not enough snails");
        
		uint256 _sacrifice = hatcherySnail[msg.sender];
        hatcherySnail[msg.sender] = 0;
        hasSlug[msg.sender] = true;
        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);

        emit FoundSlug(msg.sender, round, _sacrifice);
    }
    
    // FindLettuce
    // Exchanges red eggs for lettuce (+1 prodBoost for the round)
    // Lowers next lettuce requirement
    
    function FindLettuce() public {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        require(hasLettuce[msg.sender] == false, "already owns lettuce");
        require(redEgg[msg.sender] >= lettuceReq, "not enough red eggs");
        
        uint256 _eventLettuceReq = lettuceReq;
        redEgg[msg.sender] = redEgg[msg.sender].sub(lettuceReq);
        lettuceReq = lettuceReq.sub(LETTUCE_BASE_REQ);
        if(lettuceReq < LETTUCE_BASE_REQ) {
            lettuceReq = LETTUCE_BASE_REQ;
        }
        
        hasLettuce[msg.sender] = true;
        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);

        emit FoundLettuce(msg.sender, round, _eventLettuceReq, redEgg[msg.sender]);
    }
    
    // FindCarrot
    // Trades ETH for carrot (+1 prodBoost for 3 rounds)
    
    function FindCarrot() public payable {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        require(gotCarrot[msg.sender] == 0, "already owns carrot");
        uint256 _cost = snailPot.div(CARROT_COST);
		require(msg.value >= _cost, "not enough ETH cost");
		
		// If player sent more ETH than needed, refund excess to playerBalance
        if (msg.value > _cost) {
            uint _excess = msg.value.sub(_cost);
            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);
        }  
        
        PotSplit(_cost);
        gotCarrot[msg.sender] = 3;
        prodBoost[msg.sender] = prodBoost[msg.sender].add(1);

        emit FoundCarrot(msg.sender, round, _cost);
    }
    
    // BecomeSpiderQueen
    // Increases playerProdBoost while held, obtained with a snail sacrifice
	// Hot potato item, requirement doubles with every buy
    
    function BecomeSpiderQueen() public {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        require(hatcherySnail[msg.sender] >= spiderReq, "not enough snails");

        // Remove sacrificed snails, increase req
        hatcherySnail[msg.sender] = hatcherySnail[msg.sender].sub(spiderReq);
        spiderReq = spiderReq.mul(2);
        
        // Lower prodBoost of old spider owner
        prodBoost[currentSpiderOwner] = prodBoost[currentSpiderOwner].sub(1);
        
        // Give ownership to msg.sender, then increases his prodBoost
        currentSpiderOwner = msg.sender;
        prodBoost[currentSpiderOwner] = prodBoost[currentSpiderOwner].add(1);
        
        emit BecameQueen(msg.sender, round, spiderReq, hatcherySnail[msg.sender]);
    }
	
	// BecomeSquirrelDuke
	// Increases playerProdBoost while held, obtained with a red egg sacrifice
    // Hot potato item, requirement doubles with every buy
    
    function BecomeSquirrelDuke() public {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        require(redEgg[msg.sender] >= squirrelReq, "not enough red eggs");
        
        // Remove red eggs spent, increase req
        redEgg[msg.sender] = redEgg[msg.sender].sub(squirrelReq);
        squirrelReq = squirrelReq.mul(2);
        
        // Lower prodBoost of old squirrel owner
        prodBoost[currentSquirrelOwner] = prodBoost[currentSquirrelOwner].sub(1);
        
        // Give ownership to msg.sender, then increases his prodBoost
        currentSquirrelOwner = msg.sender;
        prodBoost[currentSquirrelOwner] = prodBoost[currentSquirrelOwner].add(1);
        
        emit BecameDuke(msg.sender, round, squirrelReq, redEgg[msg.sender]);
    }
    
    // BecomeTadpolePrince
    // Increases playerProdBoost while held, obtained with ETH
    // Hot potato item, price increases by 20% with every buy
    
    function BecomeTadpolePrince() public payable {
        require(gameActive, "game is paused");
        require(playerRound[msg.sender] == round, "join new round to play");
        require(msg.value >= tadpoleReq, "not enough ETH");
        
        // If player sent more ETH than needed, refund excess to playerBalance
        if (msg.value > tadpoleReq) {
            uint _excess = msg.value.sub(tadpoleReq);
            playerBalance[msg.sender] = playerBalance[msg.sender].add(_excess);
        }  
        
        // Calculate +10% from previous price
        // Give result to the potsplit
        uint _extra = tadpoleReq.div(12); 
        PotSplit(_extra);
        
        // Calculate 110% of previous price
        // Give result to the previous owner
        uint _previousFlip = tadpoleReq.mul(11).div(12);
        playerBalance[currentTadpoleOwner] = playerBalance[currentTadpoleOwner].add(_previousFlip);
        
        // Increase ETH required for next buy by 20%
        tadpoleReq = (tadpoleReq.mul(6)).div(5); 
        
        // Lower prodBoost of old tadpole owner
        prodBoost[currentTadpoleOwner] = prodBoost[currentTadpoleOwner].sub(1);
        
        // Give ownership to msg.sender, then increase his prodBoost
        currentTadpoleOwner = msg.sender;
        prodBoost[currentTadpoleOwner] = prodBoost[currentTadpoleOwner].add(1);
        
        emit BecamePrince(msg.sender, round, tadpoleReq);
    }
    
    // fallback function
    // Feeds the snailPot
    
    function() external payable {
        snailPot = snailPot.add(msg.value);
        
        emit BoostedPot(msg.sender, msg.value);
    }
    
    // ComputeAcornCost
    // Returns acorn cost at the current time
    // Before the game starts, acorns are at half cost
    // After the game is started, cost is multiplied by 10/(10+round)
    
    function ComputeAcornCost() public view returns(uint256) {
        uint256 _acornCost;
        if(round != 0) {
            _acornCost = ACORN_PRICE.mul(ACORN_MULT).div(ACORN_MULT.add(round));
        } else {
            _acornCost = ACORN_PRICE.div(2);
        }
        return _acornCost;
    }
    
    // ComputeAcornBuy
    // Returns acorn amount for a given amount of ETH
    
    function ComputeAcornBuy(uint256 _ether) public view returns(uint256) {
        uint256 _costPerAcorn = ComputeAcornCost();
        return _ether.div(_costPerAcorn);
    }
    
    // ComputeMyShare
    // Returns unclaimed share for the player
    
    function ComputeMyShare() public view returns(uint256) {
        //Calculate share of player
        uint256 _playerShare = divPerAcorn.mul(acorn[msg.sender]);
		
        //Subtract already claimed divs
    	_playerShare = _playerShare.sub(claimedShare[msg.sender]);
        return _playerShare;
    }
    
    // ComputeHarvest
    // Calculates current ETH cost to claim red harvest
    // Dutch auction
    
    function ComputeHarvest() public view returns(uint256) {

        //Time spent since auction start
        uint256 _timeLapsed = now.sub(harvestStartTime);
        
        //Make sure we're not beyond the end point
        if(_timeLapsed > HARVEST_DURATION) {
            _timeLapsed = HARVEST_DURATION;
        }
        
        //Get the square root of timeLapsed
        _timeLapsed = ComputeSquare(_timeLapsed);
        
        //Price differential between start and end of auction
        uint256 _priceChange = harvestStartCost.sub(harvestEndCost);
        
        //Multiply priceChange by timeLapsed root then divide by end root
        uint256 _harvestFactor = _priceChange.mul(_timeLapsed).div(HARVEST_DUR_ROOT);
        
        //Subtract result to starting price to get current price
        return harvestStartCost.sub(_harvestFactor);
    }
    
    // ComputeSquare
    // Approximate square root
    
    function ComputeSquare(uint256 base) public pure returns (uint256 squareRoot) {
        uint256 z = (base + 1) / 2;
        squareRoot = base;
        while (z < squareRoot) {
            squareRoot = z;
            z = (base / z + z) / 2;
        }
    }
    
    // ComputeSell
	// Calculates ether value for a given amount of eggs being sold
	// ETH = (eggs / marketeggs) * eggpot / 2
	// No more than 10% of the supply can be sold at once
    
    function ComputeSell(uint256 _eggspent) public view returns(uint256) {
        uint256 _maxSell = marketEgg.div(10);
        if(_eggspent > _maxSell){
            _eggspent = _maxSell;
        }
        uint256 _eggFactor = _eggspent.mul(eggPot).div(marketEgg);
        return _eggFactor.div(2);
    }
    
    // ComputeBuy
	// Calculates number of eggs bought for a given amount of ether
    // Eggs bought = ETH spent / (ETH spent + eggpot) * marketegg
    // No more than 10% of the supply can be bought at once
    
    function ComputeBuy(uint256 ethspent) public view returns(uint256) {
        uint256 _ethPool = ethspent.add(eggPot);
        uint256 _ethFactor = ethspent.mul(marketEgg).div(_ethPool);
        uint256 _maxBuy = marketEgg.div(10);
        if(_ethFactor > _maxBuy) {
            _ethFactor = _maxBuy;
        }
        return _ethFactor;
    }
    
    // ComputeMyEgg
    // Returns eggs produced since last hatch or sacrifice
	// Egg amount can never be above current snail count
    
    function ComputeMyEgg(address adr) public view returns(uint256) {
        uint256 _eggs = now.sub(lastHatch[adr]);
        _eggs = _eggs.mul(hatcherySnail[adr]).div(TIME_TO_HATCH_1SNAIL);
        if (_eggs > hatcherySnail[adr]) {
            _eggs = hatcherySnail[adr];
        }
        _eggs = _eggs.add(claimedEgg[adr]);
        return _eggs;
    }

    // Gets
    
    function GetSnail(address adr) public view returns(uint256) {
        return hatcherySnail[adr];
    }
    
    function GetAcorn(address adr) public view returns(uint256) {
        return acorn[adr];
    }
	
	function GetProd(address adr) public view returns(uint256) {
		return prodBoost[adr];
	}
    
    function GetMyEgg() public view returns(uint256) {
        return ComputeMyEgg(msg.sender);
    }
	
	function GetMyBalance() public view returns(uint256) {
	    return playerBalance[msg.sender];
	}
	
	function GetRed(address adr) public view returns(uint256) {
	    return redEgg[adr];
	}
	
	function GetLettuce(address adr) public view returns(bool) {
	    return hasLettuce[adr];
	}
	
	function GetCarrot(address adr) public view returns(uint256) {
	    return gotCarrot[adr];
	}
	
	function GetSlug(address adr) public view returns(bool) {
	    return hasSlug[adr];
	}
	
	function GetMyRound() public view returns(uint256) {
	    return playerRound[msg.sender];
	}
}

library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}